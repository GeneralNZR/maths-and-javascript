import math
 
def mandelbrot(z: complex, c: complex, n: int) -> int:
    """
    Description:
        Fonction qui calcule la valeur de mandelbrot pour 
        un complexe z et un complexe c, avec n iterations.

        Si z est trop loin, on renvoie 0.
        Si n est strictement positif, on calcule la valeur de mandelbrot pour z^2 + c
        Sinon, on renvoie la valeur de mandelbrot pour z^2 + c.
    ParamÃ¨tres:
        z: {complex} -- Le complexe z
        c: {complex} -- Le complexe c
        n: {int} -- Le nombre d'itÃ©rations
    
    Retourne:
        {int} -- La valeur de mandelbrot
    
    Exemple:
        print(
            "\n".join(["".join(["#" if not math.isnan(mandelbrot(0, x + 1j * y, 50).real) else " "
            for x in [a * 0.02 for a in range(-80, 30)]]) 
            for y in [a * 0.05 for a in range(-20, 20)]])
        )

                                                                          ##                                  
                                                                     ###########                              
                                                                    ############                              
                                                                      #########                               
                                                            #    # ############  #                            
                                                    #####  # ###########################                      
                                                    ####################################### #####             
                                                     ###########################################              
                                               ### ############################################ #             
                                                ##################################################            
                                             ########################################################         
                      #                       #####################################################           
                      ### ####### #          #######################################################          
                      #################     #######################################################           
                   ####################### #########################################################          
                   ####################### ########################################################           
             #### ################################################################################            
    #############################################################################################                 
             #### ################################################################################            
                   ####################### ########################################################           
                   ####################### #########################################################          
                      #################     #######################################################           
                      ### ####### #          #######################################################          
                      #                       #####################################################           
                                             ########################################################         
                                                ##################################################            
                                               ### ############################################ #             
                                                     ###########################################              
                                                    ####################################### #####             
                                                    #####  # ###########################                      
                                                            #    # ############  #                            
                                                                      #########                               
                                                                    ############                              
                                                                     ###########                              
                                                                          ##                                  
    """
    if abs(z) > 1000:
        return float("nan") 
    elif n > 0: 
        return mandelbrot(z ** 2 + c, c, n - 1)
    else:
        return z ** 2 + c